{"version":3,"sources":["components/AstronomyPicture/astronomyPicture.module.css","components/Spinner/Spinner.js","components/Calendar/Calendar.js","components/AstronomyPicture/astronomyPicture.js","api/api.js","utils/handlers/handlersDate.js","components/AstronomyPicture/astronomyPictureContainer.js","utils/handlerImageRequestError.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Spinner","className","role","Calendar","props","style","calendar","name","type","value","onChange","AstronomyPicture","wrapper","picture","isFetching","error","src","imageUrl","date","handlerCalendar","api","fetch","then","res","json","formatDate","d","Date","month","getMonth","day","getDate","year","getFullYear","length","join","AstronomyPictureContainer","e","target","currentDate","localStorage","removeItem","removeDateFromLocalStorage","setState","setItem","setDate","url","includes","state","getItem","this","imgDate","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console","message"],"mappings":"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","file":"static/js/main.2972cc3f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"wrapper\":\"astronomyPicture_wrapper__2gd1t\",\"picture\":\"astronomyPicture_picture__3Xkej\",\"calendar\":\"astronomyPicture_calendar__owVfe\",\"error\":\"astronomyPicture_error__2LjM7\"};","import React from 'react';\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <div className=\"spinner-border text-primary\" role=\"status\">\r\n            <span className=\"sr-only\">Loading...</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Spinner;","import React from 'react';\r\n\r\nconst Calendar = (props) => {\r\n    return (\r\n        <div className={props.style.calendar}>\r\n            <input \r\n                name={props.name} \r\n                type=\"date\" \r\n                value={props.value} \r\n                onChange={props.onChange} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default Calendar;","import React from 'react';\r\nimport style from './astronomyPicture.module.css';\r\nimport Spinner from '../Spinner/Spinner';\r\nimport Calendar from '../Calendar/Calendar';\r\n\r\nconst AstronomyPicture = props => {\r\n    return (\r\n        <div className={style.wrapper}>\r\n            <div className={style.picture}>\r\n                {props.isFetching &&\r\n                    <Spinner />\r\n                }\r\n                {props.error ?\r\n                    <p className={style.error}>{props.error}</p> :\r\n                    !props.isFetching && <img src={props.imageUrl} />\r\n                }\r\n            </div>\r\n            <Calendar\r\n                style={style}\r\n                name=\"Calendar\"\r\n                value={props.date}\r\n                onChange={props.handlerCalendar} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default AstronomyPicture;","const key = '3JTXJIJ51tHe1R0q9iq3VbgXJxq7moRTUxaeBsa2';\r\n\r\nexport const api = {\r\n    getPicture(date) {\r\n        return fetch(`https://api.nasa.gov/planetary/apod?api_key=${key}&date=${date}`)\r\n            .then(res => {\r\n                return res.json();\r\n            })\r\n    }\r\n}","export const formatDate = date => {\r\n    let d = new Date(date),\r\n        month = '' + (d.getMonth() + 1),\r\n        day = '' + d.getDate(),\r\n        year = d.getFullYear();\r\n\r\n    if (month.length < 2) \r\n        month = '0' + month;\r\n    if (day.length < 2) \r\n        day = '0' + day;\r\n\r\n    return [year, month, day].join('-');\r\n}\r\n\r\nexport const removeDateFromLocalStorage = (date) => {\r\n    const currentDate = formatDate(new Date());\r\n    const selectedDate = formatDate(date);\r\n\r\n    if (selectedDate === currentDate) {\r\n        localStorage.removeItem('date')\r\n    }\r\n}\r\n\r\nexport const setDate = date => {\r\n    const userDate = formatDate(new Date(date));\r\n    const currentDate = formatDate(new Date());\r\n\r\n    if (!(userDate === currentDate)) {\r\n        localStorage.setItem('date', date);\r\n    }\r\n}","import React from 'react';\r\nimport AstronomyPicture from './astronomyPicture';\r\nimport { api } from '../../api/api';\r\nimport { \r\n    removeDateFromLocalStorage, \r\n    setDate, \r\n    formatDate \r\n} from '../../utils/handlers/handlersDate'\r\nimport { handlerImageRequestError } from '../../utils/handlerImageRequestError';\r\n\r\nclass AstronomyPictureContainer extends React.Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            imageUrl: null,\r\n            error: null,\r\n            date: formatDate(new Date()),\r\n            isFetching: false\r\n        }\r\n    }\r\n    handlerCalendar = e => {\r\n        const date = e.target.value;\r\n\r\n        removeDateFromLocalStorage(date);\r\n        this.setState({ error: null });\r\n        if (e.target.name = 'calendar') {\r\n            this.setState({ date });\r\n            setDate(date);\r\n            this.setState({ isFetching: true });\r\n            api.getPicture(date)\r\n                .then(res => {\r\n                    const error = handlerImageRequestError(res.url);\r\n                    if (error) {\r\n                        this.setState({ error: \"Image does not exists\" });\r\n                        this.setState({ isFetching: false });\r\n                    } else {\r\n                        this.setState({ imageUrl: res.url });\r\n                        this.setState({ error: null });\r\n                        this.setState({ isFetching: false });\r\n                    }\r\n                });\r\n        }\r\n    }\r\n    componentDidMount() {\r\n        const date = localStorage.getItem('date');\r\n        this.setState({ date });\r\n        const imgDate = date ? date : this.state.date;\r\n\r\n        this.setState({ isFetching: true });\r\n        api.getPicture(imgDate)\r\n            .then(res => {\r\n                this.setState({ imageUrl: res.url });\r\n                this.setState({ isFetching: false });\r\n            });\r\n    }\r\n\r\n    render() {\r\n        return <AstronomyPicture\r\n            imageUrl={this.state.imageUrl}\r\n            handlerCalendar={this.handlerCalendar}\r\n            date={this.state.date}\r\n            error={this.state.error}\r\n            isFetching={this.state.isFetching} />\r\n    }\r\n}\r\n\r\nexport default AstronomyPictureContainer;","export const  handlerImageRequestError = url => {\r\n    if (url && url.includes('image')) {\r\n        return false\r\n    }\r\n    return true;\r\n}","import React from 'react';\nimport './App.css';\nimport AstronomyPictureContainer from './components/AstronomyPicture/astronomyPictureContainer';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <AstronomyPictureContainer />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}